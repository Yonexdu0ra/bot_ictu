import tracking from "../util/bot/tracking.js";
import typingMessage from "../util/bot/typingMessage.js";
import Account from "../model/Account.js";
import Key from "../model/Key.js";
async function thiA2({ data, query }) {
  const message = query.message;
  const json = JSON.parse(data);
  const chat_id = message.chat.id;
  const message_id = message.message_id;
  try {
    const { editMessage } = await typingMessage(this, {
      chat_id,
      message: "ƒê·ª£i ch√∫t nh√©",
    });
    const accountData = await Account.findOne({
      chat_id,
    });
    if (!accountData) {
      await editMessage(
        `Ch·ª©c nƒÉng n√†y c·∫ßn b·∫°n cung c·∫•p **KEY** ƒë·ªÉ s·ª≠ d·ª•ng !\n\nB·∫°n c√≥ th·ªÉ cung c·∫•p b·∫±ng c√°ch g·ª≠i tin nh·∫Øn v·ªõi c√∫ ph√°p: \n\n\/set_key - ƒë·ªÉ thi·∫øt l·∫≠p **KEY**\n\nN·∫øu b·∫°n kh√¥ng c√≥ **KEY** vui l√≤ng li√™n h·ªá [${global.ictu_data.ADMIN_NAME}](${global.ictu_data.CONTACT_URL}).`
      );

      return;
    }
    const isKey = await Key.findOne({ key: accountData.key });
    if (!isKey || isKey.count < 1) {
      await editMessage(
        `R·∫•t ti·∫øc **KEY** c·ªßa b·∫°n h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng r·ªìi li√™n h·ªá [${global.ictu_data.ADMIN_NAME}](${global.ictu_data.CONTACT_URL}) ƒë·ªÉ tƒÉng th√™m l∆∞·ª£t nh√© !`
      );
      return;
    }
    if (isKey.type !== "THIA2") {
      await editMessage(`**KEY** c·ªßa b·∫°n kh√¥ng th·ªÉ d√πng ƒë∆∞·ª£c ch·ª©c nƒÉng n√†y`);
      return;
    }

    if (!global.access_token_thia2 || !global.temp_email) {
      await editMessage("L·ªánh n√†y ƒë√£ h·∫øt h·∫°n vui l√≤ng ch·∫°y l·∫°i t·ª´ ƒë·∫ßu nh√©.");
      return;
    }
    await Key.findOneAndUpdate(
      {
        key: accountData.key,
      },
      {
        count: isKey.count - 1,
      }
    );

    await tracking(this, message, [global.ictu_data.TELEGRAM_CHAT_ID_ADMIN]);

    await editMessage(`ƒêang ti·∫øn l·∫•y d·ªØ li·ªáu...`);
    const res = await fetch(
      `${process.env.URL_SERVER_GLITCH}/api/v1/thia2/?secret_key=${
        process.env.SECRET_KEY
      }&email=${global.temp_email}&shift_test_id=${json.value}&token=${
        global.access_token_thia2 || ""
      }`
    );
    const data = await res.json();
    if (data.status === "error") {
      await Key.findOneAndUpdate(
        {
          key: accountData.key,
        },
        {
          count: isKey.count,
        }
      );
      await editMessage(`L·∫•y d·ªØ li·ªáu kh√¥ng th√†nh c√¥ng`);
      return;
    }

    await editMessage(`ƒêang t·∫°o li√™n k·∫øt...`);
    const res2 = await fetch(`${process.env.URL_SERVER_GLITCH_2}/api/v1/`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        data,
      }),
    });
    const data2 = await res2.json();
    if (data2.status === "error") {
      await editMessage(data2.message);
      return;
    }
    const encodeURL = btoa(data2.data);
    await editMessage(
      `‚ö†Ô∏è Hi·ªáu l·ª±c c·ªßa li√™n k·∫øt n√†y ch·ªâ c√≥ th·ªÉ *d√πng 1 l·∫ßn duy nh·∫•t* v√† li√™n k·∫øt c√≥ hi·ªáu l·ª±c *kho·∫£ng 5 ph√∫t* h√£y nhanh ch√≥ng truy c·∫≠p v√† l∆∞u l·∫°i th√¥ng tin nh√©\n\nüí° *M·∫πo*: ·ªû *Window* c√≥ th·ªÉ d√πng t·ªï h·ª£p ph√≠m \`Ctrl + s\`,  *Android* ·∫•n \`...\` ch·ªçn n√∫t \`download\` ƒë·ªÉ c√≥ th·ªÉ t·∫£i l·∫°i file ƒë·ªÉ xem sau\n\nN·∫øu g·∫∑p s·ª± c·ªë vui l√≤ng li√™n h·ªá [Admin](${global.ictu_data.CONTACT_URL})`,
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "Truy c·∫≠p b√†i ki·ªÉm tra",
                url: `${process.env.URL_SERVER_RENDER}/?u=${encodeURL}`,
              },
            ],
          ],
        },
      }
    );
  } catch (error) {
    console.error(error);
    await this.sendMessage(chat_id, `Huhu l·ªói r·ªìi th·ª≠ l·∫°i sau √≠t ph√∫t nh√©`, {
      reply_to_message_id: message_id,
    });
    return;
  }
}
export default thiA2;
